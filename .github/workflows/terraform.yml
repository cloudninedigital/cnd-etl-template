#name: 'Terraform'
#
#on:
#  push:
#    tags:
#      - '*' # Push events to matching v*, i.e. v1.0, v20.15.10
#    # Allows you to run this workflow manually from the Actions tab
#    branches:
#      - '*'
#  pull_request:
#  workflow_dispatch:
#
#env:
#  DEVELOPMENT_STAGE: "dev"
#  PRODUCTION_STAGE: "prd"
#  STAGING_STAGE: "stg"
#  DEVELOPMENT_BRANCH: "development"
#  DEVELOPMENT_REF: "refs/heads/development"
#  STAGING_BRANCH: "main"
#  STAGING_REF: "refs/heads/main"
#
#
#permissions:
#  contents: read
#
#jobs:
#  terraform:
#    name: 'Terraform'
#    runs-on: ubuntu-latest
#    environment: production
#
#    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
#    defaults:
#      run:
#        shell: bash
#
#    steps:
#    # Checkout the repository to the GitHub Actions runner
#    - name: Checkout
#      uses: actions/checkout@v3
#
#    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
#    - name: Setup Terraform
#      uses: hashicorp/setup-terraform@v2
#
#    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
#    - name: Terraform Init
#      working-directory: ./terraform
#      run: terraform init
#      env:
#        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
#
#    # Terraform version
#    - name: Terraform Version
#      working-directory: ./terraform
#      run: terraform --version
#
#    # Validate the Terraform files
#    - name: Terraform Validate
#      working-directory: ./terraform
#      run: terraform validate
#
#    # Generates an execution plan for Terraform in development
#    - name: Terraform Plan Development
#      # Plan if not on staging branch or tag
#      if: github.ref != env.STAGING_REF && !startsWith(github.ref, 'refs/tags/v')
#      run: ./helpers/deploy.sh -a plan -s $DEVELOPMENT_STAGE
#      env:
#        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
#
#    # Generates an execution plan for Terraform in staging
#    - name: Terraform Plan Staging
#      if: ${{ !startsWith(github.ref, 'refs/tags/v') }}
#      run: ./helpers/deploy.sh -a plan -s $STAGING_STAGE
#      env:
#        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
#
#    # Generates an execution plan for Terraform in production
#    - name: Terraform Plan Production
#      if: startsWith(github.ref, 'refs/tags/v') || github.ref == env.STAGING_REF
#      run: ./helpers/deploy.sh -a plan -s $PRODUCTION_STAGE
#      env:
#        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
#
#      # On push to "main", build or change infrastructure according to Terraform configuration files
#      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
#      # TODO check how to implement strict status check
#    - name: Terraform Apply Development
#      if: github.ref == env.DEVELOPMENT_REF
#      run: ./helpers/deploy.sh -a apply -s $DEVELOPMENT_STAGE -y
#      env:
#        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
#
#    - name: Terraform Apply Staging
#      if: github.ref == env.STAGING_REF
#      run: ./helpers/deploy.sh -a apply -s $STAGING_STAGE -y
#      env:
#        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
#
#    - name: Terraform Apply Production
#      # TODO change this job to only deploy to production on new releases, instead of tags
#      #   See https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#release
#      if: startsWith(github.ref, 'refs/tags/v')
#      run: ./helpers/deploy.sh -a apply -s $PRODUCTION_STAGE -y
#      env:
#        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
